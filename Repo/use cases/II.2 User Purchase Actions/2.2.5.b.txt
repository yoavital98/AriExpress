title member wants to purchase regular bid


actor Amiel
actor Admin
actor Feliks
actor Sona

actor Sonb
actor Sonc
actor Sond



participant Service

participant StoreFacade


participant Store

participant basket
participant messanger


Amiel->Service:service.placeBid("Amiel", "Feliks&Sons", 25, 3, 4)
Service->StoreFacade:service.placeBid("Amiel", "Feliks&Sons", 25, 3, 4)
StoreFacade->StoreFacade: getOnlineMemberOnly(username)
StoreFacade->Store:checkProductAvailability(product_id, quantity)
Store-->StoreFacade: boolean response
StoreFacade->basket:addBidToBasket(bid, store)
StoreFacade->Store: requestBid(Bid)
Store->Store: bid has been added to the store system
StoreFacade->messanger: send_notification(username, "Bid request was placed", "", datetime.now())
loop for staffmember in store.getAllStaffMmebers()
StoreFacade->messanger: send_notification(staff_member, "Bid request was placed", "", datetime.now())
end 
StoreFacade-->Service: bid
Service-->Amiel: Bid

Amiel->Service:service.placeBid("Amiel", "Feliks&Sons", 25, 4, 4)
Service->StoreFacade:service.placeBid("Amiel", "Feliks&Sons", 25, 4, 4)
StoreFacade->StoreFacade: getOnlineMemberOnly(username)
StoreFacade->Store:checkProductAvailability(product_id, quantity)
Store-->StoreFacade: boolean response
StoreFacade->basket:addBidToBasket(bid, store)
StoreFacade->Store: requestBid(Bid)
Store->Store: bid has been added to the store system
StoreFacade->messanger: send_notification(username, "Bid request was placed", "", datetime.now())
loop for staffmember in store.getAllStaffMmebers()
StoreFacade->messanger: send_notification(staff_member, "Bid request was placed", "", datetime.now())
end 
StoreFacade-->Service: bid
Service-->Amiel: Bid

Feliks->Service:approveBid("Feliks", "Feliks&Sons", 3)
Sona->Service:approveBid("Feliks", "Feliks&Sons", 3)
Sonb->Service:approveBid("Feliks", "Feliks&Sons", 3)
Sonc->Service:approveBid("Feliks", "Feliks&Sons", 3)
Sond->Service:approveBid("Feliks", "Feliks&Sons", 3)
Feliks->Service:approveBid("Feliks", "Feliks&Sons", 3)
Feliks->Service:approveBid("Feliks", "Feliks&Sons", 3)
Feliks->Service:approveBid("Feliks", "Feliks&Sons", 3)
Feliks->Service:approveBid("Feliks", "Feliks&Sons", 4)
Sona->Service:approveBid("Feliks", "Feliks&Sons", 4)
Amiel->Service:purchaseConfirmedBid(0, "Feliks&Sons", "Amiel", "4580020345672134", "12/26", "Amiel Saad", "555", "123456789","be'er sheva", "beer sheva", "israel", "1234152")
Service->StoreFacade:purchaseConfirmedBid(0, "Feliks&Sons", "Amiel", "4580020345672134", "12/26", "Amiel Saad", "555", "123456789","be'er sheva", "beer sheva", "israel", "1234152")
StoreFacade->Cart: purchaseConfirmedBid(0, "Feliks&Sons", "Amiel", "4580020345672134", "12/26", "Amiel Saad", "555", "123456789","be'er sheva", "beer sheva", "israel", "1234152")
Cart->Cart:successful purchase
Cart->messanger: send_notification(user_name, message_header, single_product_dict,datetime.now())
loop for staffmember in store.getAllStaffMembersNames()
Cart->messanger:send_notification(staff_member, message_header, single_product_dict, datetime.now())
end
Cart->basket:clearBidFromBasket(store_name, bid_id)
Cart->TransactionHistory: UserTransaction()
Cart->TransactionHistory: StoreTransaction()
Cart-->StoreFacade: recipe
StoreFacade-->Service: recipe
Service-->Amiel: response

Amiel->Service:purchaseConfirmedBid(1, "Feliks&Sons", "Amiel", "4580020345672134", "12/26", "Amiel Saad", "555", "123456789","be'er sheva", "beer sheva", "israel", "1234152")
Service->StoreFacade:purchaseConfirmedBid(1, "Feliks&Sons", "Amiel", "4580020345672134", "12/26", "Amiel Saad", "555", "123456789","be'er sheva", "beer sheva", "israel", "1234152")
StoreFacade->Cart: purchaseConfirmedBid(1, "Feliks&Sons", "Amiel", "4580020345672134", "12/26", "Amiel Saad", "555", "123456789","be'er sheva", "beer sheva", "israel", "1234152")
Cart->Cart:fail purchase
Cart->basket:clearBidFromBasket(store_name, bid_id)
Cart-->StoreFacade: Exception
StoreFacade-->Service: Exception
Service-->Amiel: response